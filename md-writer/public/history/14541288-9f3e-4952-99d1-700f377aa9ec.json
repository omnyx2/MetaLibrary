[{"id":"ddba05e7-296d-41b1-8b8b-03baf8fe0a2b","timestamp":"2024-08-08T11:58:30.255Z","changes":[{"count":478,"added":true,"value":"# Review of Arc Paper With DC neural Network \n\n부제: Neural networks for abstarction and reaasoning: Towards broad generalization in machines.  \n\n논문에 대하여,\n\n해당 논문은 Arc문제는 DreamCoder , PeARL, LLM을 섞어서 문제를 송빙하엿다\n\n## 풀이 절차 분석\n\n해당 논문을 통해서 ARC를 접근하는 다양한 툴과 ARC를 풀어내는 툴에 대한 조합을 어떻게 했는지에 대한 좋은 인사이트를 얻을 수 있었다. 이를 분리해보자면 다음의 측면으로써 분리가 된다.\n\n1. ARC를 Solving하는 기법 - DSL search, DreamCoder, LLM, Ensemble,\n2. 각 기법별 impl, 아래 표로 정리\n3. ARC 문제의 구별, ARC-easy & ARC-hard\n\n\n\n| DSL search | DreamCoder | LLM | Ensemble |\n| --- | --- | --- | --- |\n| Icecuber | DreamCoder | GPT4 & 3.5 | DC + GPT-4|\n| ARGA | | LLaMA-65B |  icecuber + DC +GPT-4|\n\n\n## 논문에서 알려주는 정보\n\n그외에 논문에서 다른 풀이에 대한 것을 보다 이해하기 편하게 정리해 놓았으며 ARC의 풀이에 대한 좋은 도움을 주어 이를 정리하였다.\n\n### Icecuber \n  \n해당 풀이가 생각보다 물건이였다.\n1. 142개의 hand-craft solutions를 바탕으로 제작됨\n2. Color Normalised가 적용됨\n3. pieces는 각 조각 퍼즐임 \n3. DAG를 이용하여 각 조각 퍼즐이 합당하게 합쳐지면 Greedy Stacking Solver에 넣고 Final Prediction을 만들어냄\n\n\n```cpp\nfor (int depth = 0; depth < q.size(); depth++) {\n    while (q"},{"count":1,"added":true,"value":"depth"},{"count":1774,"added":true,"value":".size()) {\n      int memi = q[depth].front();\n      q[depth].pop();\n      if (depth > depth_mem[memi/dags]) continue;\n      assert(depth == depth_mem[memi/dags]);\n\n      vector<int> ind(mem.begin()+memi, mem.begin()+memi+dags);\n      {\n\tint ok = 1, maxdepth = -1;\n\tfor (int i = 0; i < dags; i++) {\n\t  maxdepth = max(maxdepth, (int)dag[i].tiny_node[ind[i]].depth);\n\t  ok &= dag[i].tiny_node[ind[i]].ispiece;\n\t}\n\tif (ok && maxdepth >= depth) {\n\t  Piece3 p;\n\t  p.memi = memi;\n\t  p.depth = depth;\n\t  pieces.piece.push_back(p);\n\t}\n\tif (maxdepth < depth) continue;\n      }\n\n      newi_list.clear();\n\n      child_time.start();\n      {\n\tfor (int i = 0; i <= train.size(); i++)\n\t  dag[i].tiny_node[ind[i]].child.legacy(slow_child[i]);\n\tvector<int> newi(dags), ci(dags); //current index into child[]\n\tint fi = 0;\n\twhile (1) {\n\tnext_iteration:\n\t  for (int i = 0; i <= train.size(); i++) {\n\t    auto&child = slow_child[i];//dag[i].node[ind[i]].child;\n\t    while (ci[i] < child.size() &&\n\t\t   child[ci[i]].first < fi) ci[i]++;\n\t    if (ci[i] == child.size()) goto finish;\n\n\t    int next_available_fi = child[ci[i]].first;\n\t    if (next_available_fi > fi) {\n\t      fi = next_available_fi;\n\t      goto next_iteration;\n\n\t    } else {\n\n\t      newi[i] = child[ci[i]].second;\n\n\t      if (newi[i] == -1) {\n\t\tfi++;\n\t\tgoto next_iteration;\n\t      }\n\t    }\n\t  }\n\t  newi_list.emplace_back(fi, newi);\n\t  fi++;\n\t}\n      finish:;\n      }\n      child_time.stop();\n\n      for (auto&[fi, newi] : newi_list) {\n\tif (0) {\n\t  int i = train.size();\n\t  //auto&child = dag[i].node[ind[i]].child;\n\t  //auto it = lower_bound(child.begin(), child.end(), make_pair(fi, -1));\n\t  //if (it == child.end() || it->first != fi) {\n\t  int to = dag[i].tiny_node.getChild(ind[i], fi);\n\t  if (to == TinyChildren::None) {\n\t    string name = dag[i].funcs.getName(fi);\n\t    if (name.substr(0,4) == \"Move\") {\n\t      newi[i] = dag[i].applyFunc(ind[i], fi);\n\t      if (newi[i] != -1 && out_sizes.size())\n\t\tdag[i].applyFunc(newi[i], dag[i].funcs.findfi(\"embed 1\"));\n\t    } else continue;\n\t  } else {\n\t    newi[i] = to; //it->second\n\t  }\n\t  if (newi[i] == -1) continue;\n\t}\n\n\tint new_depth = -1;\n\tfor (int i = 0; i < dags; i++) {\n\t  new_depth = max(new_depth, (int)dag[i].tiny_node[newi[i]].depth);\n\t}\n\n\tint cost = dag[0].funcs.cost[fi];\n\n\tif (new_depth >= depth+cost) {\n\t  add(depth+cost, newi);\n\t}\n      }\n    }\n  }\n```\n다음의 과정을 통해서 Ice cuber는 단순한 형태에 대해서 쉽게 문제를 풀수 있도록 Preset을 지정하고 이를 바탕으로 Final Predication을 제작해내는데 이는 마치 어린아이가 직소퍼즐 블록을 들고 조립하여 문제를 푸는 과정이과 유사하다고 생각되었다. 이는 법칙을 추론하는 절차라기 보다 많은 try를 바탕으로 가장 빠르게 퍼즐을 조립하는 어린아이의 관점의 지능에서 제작된 알고리즘임을 유추해볼 수 있었다.\n\n### DreamCoder\n\n해당 논문의 원문은 아래에 나와있다.,   \nDreamCoder: Growing generalizable, interpretable knowledge with wake-sleep Bayesian program learning  \n\n이는 전문가의 학습에 대해서 고민한 딥러닝 기법으로 Dream과정과 Sleeping과정이 있으며, Dream의 절차에서는 DSL을 받아들이고 읽어들이는 절차를 진행한다. 현재 에디터에서 \n\n### Dreaming with ARC\n\n현재 공부중 \n\n### ARC-kit\n\n## 종합\n\n현재 아크에서 가장 핫(?)한 주제가 몇 개가 존재한다.\n\n1. 어떻게 연산자를 합칠 것인가 - DAG, Dreaming sleep ,MCTS(둘이 유사), PeARL \n2. 어떻게 최소 pices를 정의하는가 - icecube\n3. 어떻게 아크의 문제의 특성을  정의하는가 - ARC HARD, EASY, CNN\n4.  어떻게 연산 모델끼리 합칠 것인가 - Ensenble: 무차별 대입, Overlap과 Gain을 적용 후 푸는 법\n\n## 현재 한 것\n\n1. 기존에 존재하는 연산자들의 유형을 정리 할 것 -> 40% clear (arc - dsl 기준으로 공부 중)\n2. 기존의 존재하는 연산자들을 묶어서 시도해본것 -> 10% clear (arc 7 solver를 바탕으로 시도중 + ice cuber)\n3. 연산자들을 묶는 방법에 대해서 이해하는것 -> 60% clear ( Ensamble과 Dag, dicision tree 공부 진행 및 구현 중, 연산자들에 대해서 지속적으로 공부중)\n4. 연산자들을 묶는 방법에 변형을 주어 시도해 보는것 -> 30% clear ( 관련한 코드를 살짝 바꿔서 진행만 해봄\n5. AI를 기반 및 LLM 시도해 보는것 -> 0% (아직 계획 없음) \n6. arc-kit 가지고 놀아보기 -> 50% (가벼운 사용법 학습 중)\n7. arc 학습 또는 풀어본 내용을 다같이 공유하기 위해서 에디터 제작 ->  70%(현재의 에디터가 그러한 관점에서 진행중임)\n\n"}],"message":"New"},{"id":"d057b24d-9a57-413e-acab-b9a73ea9a4c7","timestamp":"2024-08-09T08:20:40.475Z","changes":[{"value":"# Review of Arc Paper With DC neural Network \n\n부제: Neural networks for abstarction and reaasoning: Towards broad generalization in machines.  \n\n논문에 대하여,\n\n해당 논문은 Arc문제는 DreamCoder , PeARL, LLM을 섞어서 문제를 송빙하엿다\n\n## 풀이 절차 분석\n\n해당 논문을 통해서 ARC를 접근하는 다양한 툴과 ARC를 풀어내는 툴에 대한 조합을 어떻게 했는지에 대한 좋은 인사이트를 얻을 수 있었다. 이를 분리해보자면 다음의 측면으로써 분리가 된다.\n\n1. ARC를 Solving하는 기법 - DSL search, DreamCoder, LLM, Ensemble,\n2. 각 기법별 impl, 아래 표로 정리\n3. ARC 문제의 구별, ARC-easy & ARC-hard\n\n\n\n| DSL search | DreamCoder | LLM | Ensemble |\n| --- | --- | --- | --- |\n| Icecuber | DreamCoder | GPT4 & 3.5 | DC + GPT-4|\n| ARGA | | LLaMA-65B |  icecuber + DC +GPT-4|\n\n\n## 논문에서 알려주는 정보\n\n그외에 논문에서 다른 풀이에 대한 것을 보다 이해하기 편하게 정리해 놓았으며 ARC의 풀이에 대한 좋은 도움을 주어 이를 정리하였다.\n\n### Icecuber \n  \n해당 풀이가 생각보다 물건이였다.\n1. 142개의 hand-craft solutions를 바탕으로 제작됨\n2. Color Normalised가 적용됨\n3. pieces는 각 조각 퍼즐임 \n3. DAG를 이용하여 각 조각 퍼즐이 합당하게 합쳐지면 Greedy Stacking Solver에 넣고 Final Prediction을 만들어냄\n\n\n```cpp\nfor (int depth = 0; depth < q.size(); depth++) {\n    while (q[depth].size()) {\n      int memi = q[depth].front();\n      q[depth].pop();\n      if (depth > depth_mem[memi/dags]) continue;\n      assert(depth == depth_mem[memi/dags]);\n\n      vector<int> ind(mem.begin()+memi, mem.begin()+memi+dags);\n      {\n\tint ok = 1, maxdepth = -1;\n\tfor (int i = 0; i < dags; i++) {\n\t  maxdepth = max(maxdepth, (int)dag[i].tiny_node[ind[i]].depth);\n\t  ok &= dag[i].tiny_node[ind[i]].ispiece;\n\t}\n\tif (ok && maxdepth >= depth) {\n\t  Piece3 p;\n\t  p.memi = memi;\n\t  p.depth = depth;\n\t  pieces.piece.push_back(p);\n\t}\n\tif (maxdepth < depth) continue;\n      }\n\n      newi_list.clear();\n\n      child_time.start();\n      {\n\tfor (int i = 0; i <= train.size(); i++)\n\t  dag[i].tiny_node[ind[i]].child.legacy(slow_child[i]);\n\tvector<int> newi(dags), ci(dags); //current index into child[]\n\tint fi = 0;\n\twhile (1) {\n\tnext_iteration:\n\t  for (int i = 0; i <= train.size(); i++) {\n\t    auto&child = slow_child[i];//dag[i].node[ind[i]].child;\n\t    while (ci[i] < child.size() &&\n\t\t   child[ci[i]].first < fi) ci[i]++;\n\t    if (ci[i] == child.size()) goto finish;\n\n\t    int next_available_fi = child[ci[i]].first;\n\t    if (next_available_fi > fi) {\n\t      fi = next_available_fi;\n\t      goto next_iteration;\n\n\t    } else {\n\n\t      newi[i] = child[ci[i]].second;\n\n\t      if (newi[i] == -1) {\n\t\tfi++;\n\t\tgoto next_iteration;\n\t      }\n\t    }\n\t  }\n\t  newi_list.emplace_back(fi, newi);\n\t  fi++;\n\t}\n      finish:;\n      }\n      child_time.stop();\n\n      for (auto&[fi, newi] : newi_list) {\n\tif (0) {\n\t  int i = train.size();\n\t  //auto&child = dag[i].node[ind[i]].child;\n\t  //auto it = lower_bound(child.begin(), child.end(), make_pair(fi, -1));\n\t  //if (it == child.end() || it->first != fi) {\n\t  int to = dag[i].tiny_node.getChild(ind[i], fi);\n\t  if (to == TinyChildren::None) {\n\t    string name = dag[i].funcs.getName(fi);\n\t    if (name.substr(0,4) == \"Move\") {\n\t      newi[i] = dag[i].applyFunc(ind[i], fi);\n\t      if (newi[i] != -1 && out_sizes.size())\n\t\tdag[i].applyFunc(newi[i], dag[i].funcs.findfi(\"embed 1\"));\n\t    } else continue;\n\t  } else {\n\t    newi[i] = to; //it->second\n\t  }\n\t  if (newi[i] == -1) continue;\n\t}\n\n\tint new_depth = -1;\n\tfor (int i = 0; i < dags; i++) {\n\t  new_depth = max(new_depth, (int)dag[i].tiny_node[newi[i]].depth);\n\t}\n\n\tint cost = dag[0].funcs.cost[fi];\n\n\tif (new_depth >= depth+cost) {\n\t  add(depth+cost, newi);\n\t}\n      }\n    }\n  }\n```\n다음의 과정을 통해서 Ice cuber는 단순한 형태에 대해서 쉽게 문제를 풀수 있도록 Preset을 지정하고 이를 바탕으로 Final Predication을 제작해내는데 이는 마치 어린아이가 직소퍼즐 블록을 들고 조립하여 문제를 푸는 과정이과 유사하다고 생각되었다. 이는 법칙을 추론하는 절차라기 보다 많은 try를 바탕으로 가장 빠르게 퍼즐을 조립하는 어린아이의 관점의 지능에서 제작된 알고리즘임을 유추해볼 수 있었다.\n\n### DreamCoder\n\n해당 논문의 원문은 아래에 나와있다.,   \nDreamCoder: Growing generalizable, interpretable knowledge with wake-sleep Bayesian program learning  \n\n이는 전문가의 학습에 대해서 고민한 딥러닝 기법으로 Dream과정과 Sleeping과정이 있으며, Dream의 절차에서는 DSL을 받아들이고 읽어들이는 절차를 진행한다. 현재 에디터에서 \n\n### Dreaming with ARC\n\n현재 공부중 \n\n### ARC-kit\n\n## 종합\n\n현재 아크에서 가장 핫(?)한 주제가 몇 개가 존재한다.\n\n1. 어떻게 연산자를 합칠 것인가 - DAG, Dreaming sleep ,MCTS(둘이 유사), PeARL \n2. 어떻게 최소 pices를 정의하는가 - icecube\n3. 어떻게 아크의 문제의 특성을  정의하는가 - ARC HARD, EASY, CNN\n4.  어떻게 연산 모델끼리 합칠 것인가 - Ensenble: 무차별 대입, Overlap과 Gain을 적용 후 푸는 법\n\n## 현재 한 것\n\n1. 기존에 존재하는 연산자들의 유형을 정리 할 것 -> 40% clear (arc - dsl 기준으로 공부 중)\n2. 기존의 존재하는 연산자들을 묶어서 시도해본것 -> 10% clear (arc 7 solver를 바탕으로 시도중 + ice cuber)\n3. 연산자들을 묶는 방법에 대해서 이해하는것 -> 60% clear ( Ensamble과 Dag, dicision tree 공부 진행 및 구현 중, 연산자들에 대해서 지속적으로 공부중)\n4. 연산자들을 묶는 방법에 변형을 주어 시도해 보는것 -> 30% clear ( 관련한 코드를 살짝 바꿔서 진행만 해봄\n5. AI를 기반 및 LLM 시도해 보는것 -> 0% (아직 계획 없음) \n6. arc-kit 가지고 놀아보기 -> 50% (가벼운 사용법 학습 중)\n7. arc 학습 또는 풀어본 내용을 다같이 공유하기 위해서 에디터 제작 ->  70%(현재의 에디터가 그러한 관점에서 진행중임)\n\n"}],"message":"Test"},{"id":"76be9ed4-edb8-4aef-8732-3e46d6feef28","timestamp":"2024-08-10T08:36:55.166Z","changes":[{"value":"# Review of Arc Paper With DC neural Network \n\n부제: Neural networks for abstarction and reaasoning: Towards broad generalization in machines.  \n\n논문에 대하여,\n\n해당 논문은 Arc문제는 DreamCoder , PeARL, LLM을 섞어서 문제를 "},{"value":"송빙하엿다","removed":true},{"value":"Solving","added":true},{"value":" "},{"value":"하였다","added":true},{"value":"\n"},{"value":"\n","added":true},{"value":"## 풀이 절차 분석\n\n해당 논문을 통해서 ARC를 접근하는 다양한 툴과 ARC를 풀어내는 툴에 대한 조합을 어떻게 했는지에 대한 좋은 인사이트를 얻을 수 있었다. 이를 분리해보자면 다음의 측면으로써 분리가 된다.\n\n1. ARC를 Solving하는 기법 - DSL search, DreamCoder, LLM, Ensemble,\n2. 각 기법별 impl, 아래 표로 정리\n3. ARC 문제의 구별, ARC-easy & ARC-hard\n\n\n\n| DSL search | DreamCoder | LLM | Ensemble |\n| --- | --- | --- | --- |\n| Icecuber | DreamCoder | GPT4 & 3.5 | DC + GPT-4|\n| ARGA | | LLaMA-65B |  icecuber + DC +GPT-4|\n\n\n## 논문에서 알려주는 정보\n\n그외에 논문에서 다른 풀이에 대한 것을 보다 이해하기 편하게 정리해 놓았으며 ARC의 풀이에 대한 좋은 도움을 주어 이를 정리하였다.\n\n### Icecuber \n  \n해당 풀이가 생각보다 물건이였다.\n1. 142개의 hand-craft solutions를 바탕으로 제작됨\n2. Color Normalised가 적용됨\n3. pieces는 각 조각 퍼즐임 \n3. DAG를 이용하여 각 조각 퍼즐이 합당하게 합쳐지면 Greedy Stacking Solver에 넣고 Final Prediction을 만들어냄\n\n\n```cpp\nfor (int depth = 0; depth < q.size(); depth++) {\n    while (q[depth].size()) {\n      int memi = q[depth].front();\n      q[depth].pop();\n      if (depth > depth_mem[memi/dags]) continue;\n      assert(depth == depth_mem[memi/dags]);\n\n      vector<int> ind(mem.begin()+memi, mem.begin()+memi+dags);\n      {\n\tint ok = 1, maxdepth = -1;\n\tfor (int i = 0; i < dags; i++) {\n\t  maxdepth = max(maxdepth, (int)dag[i].tiny_node[ind[i]].depth);\n\t  ok &= dag[i].tiny_node[ind[i]].ispiece;\n\t}\n\tif (ok && maxdepth >= depth) {\n\t  Piece3 p;\n\t  p.memi = memi;\n\t  p.depth = depth;\n\t  pieces.piece.push_back(p);\n\t}\n\tif (maxdepth < depth) continue;\n      }\n\n      newi_list.clear();\n\n      child_time.start();\n      {\n\tfor (int i = 0; i <= train.size(); i++)\n\t  dag[i].tiny_node[ind[i]].child.legacy(slow_child[i]);\n\tvector<int> newi(dags), ci(dags); //current index into child[]\n\tint fi = 0;\n\twhile (1) {\n\tnext_iteration:\n\t  for (int i = 0; i <= train.size(); i++) {\n\t    auto&child = slow_child[i];//dag[i].node[ind[i]].child;\n\t    while (ci[i] < child.size() &&\n\t\t   child[ci[i]].first < fi) ci[i]++;\n\t    if (ci[i] == child.size()) goto finish;\n\n\t    int next_available_fi = child[ci[i]].first;\n\t    if (next_available_fi > fi) {\n\t      fi = next_available_fi;\n\t      goto next_iteration;\n\n\t    } else {\n\n\t      newi[i] = child[ci[i]].second;\n\n\t      if (newi[i] == -1) {\n\t\tfi++;\n\t\tgoto next_iteration;\n\t      }\n\t    }\n\t  }\n\t  newi_list.emplace_back(fi, newi);\n\t  fi++;\n\t}\n      finish:;\n      }\n      child_time.stop();\n\n      for (auto&[fi, newi] : newi_list) {\n\tif (0) {\n\t  int i = train.size();\n\t  //auto&child = dag[i].node[ind[i]].child;\n\t  //auto it = lower_bound(child.begin(), child.end(), make_pair(fi, -1));\n\t  //if (it == child.end() || it->first != fi) {\n\t  int to = dag[i].tiny_node.getChild(ind[i], fi);\n\t  if (to == TinyChildren::None) {\n\t    string name = dag[i].funcs.getName(fi);\n\t    if (name.substr(0,4) == \"Move\") {\n\t      newi[i] = dag[i].applyFunc(ind[i], fi);\n\t      if (newi[i] != -1 && out_sizes.size())\n\t\tdag[i].applyFunc(newi[i], dag[i].funcs.findfi(\"embed 1\"));\n\t    } else continue;\n\t  } else {\n\t    newi[i] = to; //it->second\n\t  }\n\t  if (newi[i] == -1) continue;\n\t}\n\n\tint new_depth = -1;\n\tfor (int i = 0; i < dags; i++) {\n\t  new_depth = max(new_depth, (int)dag[i].tiny_node[newi[i]].depth);\n\t}\n\n\tint cost = dag[0].funcs.cost[fi];\n\n\tif (new_depth >= depth+cost) {\n\t  add(depth+cost, newi);\n\t}\n      }\n    }\n  }\n```\n다음의 과정을 통해서 Ice cuber는 단순한 형태에 대해서 쉽게 문제를 풀수 있도록 Preset을 지정하고 이를 바탕으로 Final Predication을 제작해내는데 이는 마치 어린아이가 직소퍼즐 블록을 들고 조립하여 문제를 푸는 과정이과 유사하다고 생각되었다. 이는 법칙을 추론하는 절차라기 보다 많은 try를 바탕으로 가장 빠르게 퍼즐을 조립하는 어린아이의 관점의 지능에서 제작된 알고리즘임을 유추해볼 수 있었다.\n\n### DreamCoder\n\n해당 논문의 원문은 아래에 나와있다.,   \nDreamCoder: Growing generalizable, interpretable knowledge with wake-sleep Bayesian program learning  \n\n이는 전문가의 학습에 대해서 고민한 딥러닝 기법으로 Dream과정과 Sleeping과정이 있으며, Dream의 절차에서는 DSL을 받아들이고 읽어들이는 절차를 진행한다. 현재 에디터에서 \n\n### Dreaming with ARC\n\n현재 공부중 \n\n### ARC-kit\n\n## 종합\n\n현재 아크에서 가장 핫(?)한 주제가 몇 개가 존재한다.\n\n1. 어떻게 연산자를 합칠 것인가 - DAG, Dreaming sleep ,MCTS(둘이 유사), PeARL \n2. 어떻게 최소 pices를 정의하는가 - icecube\n3. 어떻게 아크의 문제의 특성을  정의하는가 - ARC HARD, EASY, CNN\n4.  어떻게 연산 모델끼리 합칠 것인가 - Ensenble: 무차별 대입, Overlap과 Gain을 적용 후 푸는 법\n\n## 현재 한 것\n\n1. 기존에 존재하는 연산자들의 유형을 정리 할 것 -> 40% clear (arc - dsl 기준으로 공부 중)\n2. 기존의 존재하는 연산자들을 묶어서 시도해본것 -> 10% clear (arc 7 solver를 바탕으로 시도중 + ice cuber)\n3. 연산자들을 묶는 방법에 대해서 이해하는것 -> 60% clear ( Ensamble과 Dag, dicision tree 공부 진행 및 구현 중, 연산자들에 대해서 지속적으로 공부중)\n4. 연산자들을 묶는 방법에 변형을 주어 시도해 보는것 -> 30% clear ( 관련한 코드를 살짝 바꿔서 진행만 해봄\n5. AI를 기반 및 LLM 시도해 보는것 -> 0% (아직 계획 없음) \n6. arc-kit 가지고 놀아보기 -> 50% (가벼운 사용법 학습 중)\n7. arc 학습 또는 풀어본 내용을 다같이 공유하기 위해서 에디터 제작 ->  70%(현재의 에디터가 그러한 관점에서 진행중임)\n\n"}],"message":"Test"}]